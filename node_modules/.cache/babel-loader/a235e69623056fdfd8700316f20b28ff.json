{"ast":null,"code":"import _slicedToArray from \"/Users/frederickbogdanoff/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/frederickbogdanoff/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/frederickbogdanoff/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/frederickbogdanoff/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/frederickbogdanoff/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/frederickbogdanoff/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/frederickbogdanoff/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/frederickbogdanoff/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/src/Board.js\";\nimport React, { Component } from 'react';\nimport Cell from './Cell';\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // TODO: set initial state\n\n    _this.state = {\n      board: _this.createBoard(),\n      hasWon: false\n    };\n    _this.flipCellsAround = _this.flipCellsAround.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.resetGame = _this.resetGame.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = [];\n\n      for (var i = 0; i < this.props.nrows; i++) {\n        board.push([]);\n\n        for (var j = 0; j < this.props.ncols; j++) {\n          board[i].push(Math.random() < this.props.chanceListStartsOn);\n        }\n      } // TODO: create array-of-arrays of true/false values\n\n\n      console.log(board);\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split('-').map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1]; // console.log(board[y][x]);\n\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n\n\n      flipCell(y, x);\n      flipCell(y, x - 1);\n      flipCell(y - 1, x);\n      flipCell(y, x + 1);\n      flipCell(y + 1, x); // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n      var hasWon = board.flat().every(function (x) {\n        return x === false;\n      });\n      console.log(hasWon);\n      this.setState({\n        hasWon: hasWon,\n        board: board\n      });\n    }\n  }, {\n    key: \"resetGame\",\n    value: function resetGame() {\n      this.setState(function (prev) {\n        return {\n          hasWon: !prev.hasWon\n        };\n      });\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      var winner = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 9\n        }\n      }, \"You win!\"), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.resetGame,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 9\n        }\n      }, \"Play again!\")); // make table board\n      // TODO\n\n      var displayBoard = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"neon-orange\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }\n      }, \"Lights\"), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"neon-blue\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }\n      }, \"Out\")), /*#__PURE__*/React.createElement(\"table\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }\n      }, this.state.board.map(function (rows, rowIndex) {\n        return /*#__PURE__*/React.createElement(\"tr\", {\n          key: rowIndex,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }\n        }, rows.map(function (cell, colIndex) {\n          return /*#__PURE__*/React.createElement(Cell, {\n            flipCellsAroundMe: _this2.flipCellsAround,\n            isLit: cell,\n            coords: \"\".concat(rowIndex, \"-\").concat(colIndex),\n            key: \"\".concat(rowIndex, \"-\").concat(colIndex),\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 19\n            }\n          });\n        }));\n      }))));\n      return this.state.hasWon ? winner : displayBoard;\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceListStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"sources":["/Users/frederickbogdanoff/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/src/Board.js"],"names":["React","Component","Cell","Board","props","state","board","createBoard","hasWon","flipCellsAround","bind","resetGame","i","nrows","push","j","ncols","Math","random","chanceListStartsOn","console","log","coord","split","map","Number","y","x","flipCell","flat","every","setState","prev","winner","displayBoard","rows","rowIndex","cell","colIndex","defaultProps"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;IAyBMC,K;;;AAMJ,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,+EAAMA,KAAN,GADiB,CAGjB;;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,MAAKC,WAAL,EADI;AAEXC,MAAAA,MAAM,EAAE;AAFG,KAAb;AAIA,UAAKC,eAAL,GAAuB,MAAKA,eAAL,CAAqBC,IAArB,uDAAvB;AACA,UAAKC,SAAL,GAAiB,MAAKA,SAAL,CAAeD,IAAf,uDAAjB;AATiB;AAUlB;AAED;;;;;kCAEc;AACZ,UAAIJ,KAAK,GAAG,EAAZ;;AACA,WAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKR,KAAL,CAAWS,KAA/B,EAAsCD,CAAC,EAAvC,EAA2C;AACzCN,QAAAA,KAAK,CAACQ,IAAN,CAAW,EAAX;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKX,KAAL,CAAWY,KAA/B,EAAsCD,CAAC,EAAvC,EAA2C;AACzCT,UAAAA,KAAK,CAACM,CAAD,CAAL,CAASE,IAAT,CAAcG,IAAI,CAACC,MAAL,KAAgB,KAAKd,KAAL,CAAWe,kBAAzC;AACD;AACF,OAPW,CASZ;;;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAYf,KAAZ;AACA,aAAOA,KAAP;AACD;AAED;;;;oCAEgBgB,K,EAAO;AAAA,wBACE,KAAKlB,KADP;AAAA,UACfY,KADe,eACfA,KADe;AAAA,UACRH,KADQ,eACRA,KADQ;AAErB,UAAIP,KAAK,GAAG,KAAKD,KAAL,CAAWC,KAAvB;;AAFqB,6BAGRgB,KAAK,CAACC,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqBC,MAArB,CAHQ;AAAA;AAAA,UAGhBC,CAHgB;AAAA,UAGbC,CAHa,yBAIrB;;;AAEA,eAASC,QAAT,CAAkBF,CAAlB,EAAqBC,CAArB,EAAwB;AACtB;AAEA,YAAIA,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGX,KAAd,IAAuBU,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGb,KAAzC,EAAgD;AAC9CP,UAAAA,KAAK,CAACoB,CAAD,CAAL,CAASC,CAAT,IAAc,CAACrB,KAAK,CAACoB,CAAD,CAAL,CAASC,CAAT,CAAf;AACD;AACF,OAZoB,CAcrB;;;AACAC,MAAAA,QAAQ,CAACF,CAAD,EAAIC,CAAJ,CAAR;AACAC,MAAAA,QAAQ,CAACF,CAAD,EAAIC,CAAC,GAAG,CAAR,CAAR;AACAC,MAAAA,QAAQ,CAACF,CAAC,GAAG,CAAL,EAAQC,CAAR,CAAR;AACAC,MAAAA,QAAQ,CAACF,CAAD,EAAIC,CAAC,GAAG,CAAR,CAAR;AACAC,MAAAA,QAAQ,CAACF,CAAC,GAAG,CAAL,EAAQC,CAAR,CAAR,CAnBqB,CAoBrB;AACA;;AACA,UAAInB,MAAM,GAAGF,KAAK,CAACuB,IAAN,GAAaC,KAAb,CAAmB,UAACH,CAAD;AAAA,eAAOA,CAAC,KAAK,KAAb;AAAA,OAAnB,CAAb;AAEAP,MAAAA,OAAO,CAACC,GAAR,CAAYb,MAAZ;AACA,WAAKuB,QAAL,CAAc;AAAEvB,QAAAA,MAAM,EAANA,MAAF;AAAUF,QAAAA,KAAK,EAALA;AAAV,OAAd;AACD;;;gCAEW;AACV,WAAKyB,QAAL,CAAc,UAACC,IAAD;AAAA,eAAW;AACvBxB,UAAAA,MAAM,EAAE,CAACwB,IAAI,CAACxB;AADS,SAAX;AAAA,OAAd;AAGD;AAED;;;;6BAES;AAAA;;AACP;AAEA;AACA,UAAIyB,MAAM,gBACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAQ,QAAA,OAAO,EAAE,KAAKtB,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAFF,CADF,CAJO,CAUP;AAEA;;AACA,UAAIuB,YAAY,gBACd,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAM,QAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAM,QAAA,SAAS,EAAC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF,CADF,eAME;AAAO,QAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAK7B,KAAL,CAAWC,KAAX,CAAiBkB,GAAjB,CAAqB,UAACW,IAAD,EAAOC,QAAP;AAAA,4BACpB;AAAI,UAAA,GAAG,EAAEA,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGD,IAAI,CAACX,GAAL,CAAS,UAACa,IAAD,EAAOC,QAAP;AAAA,8BACR,oBAAC,IAAD;AACE,YAAA,iBAAiB,EAAE,MAAI,CAAC7B,eAD1B;AAEE,YAAA,KAAK,EAAE4B,IAFT;AAGE,YAAA,MAAM,YAAKD,QAAL,cAAiBE,QAAjB,CAHR;AAIE,YAAA,GAAG,YAAKF,QAAL,cAAiBE,QAAjB,CAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADQ;AAAA,SAAT,CADH,CADoB;AAAA,OAArB,CADH,CADF,CANF,CADF;AAyBA,aAAO,KAAKjC,KAAL,CAAWG,MAAX,GAAoByB,MAApB,GAA6BC,YAApC;AACD;;;;EAhHiBjC,S;;AAAdE,K,CACGoC,Y,GAAe;AACpB1B,EAAAA,KAAK,EAAE,CADa;AAEpBG,EAAAA,KAAK,EAAE,CAFa;AAGpBG,EAAAA,kBAAkB,EAAE;AAHA,C;AAkHxB,eAAehB,KAAf","sourcesContent":["import React, { Component } from 'react';\nimport Cell from './Cell';\nimport './Board.css';\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceListStartsOn: 0.25,\n  };\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state = {\n      board: this.createBoard(),\n      hasWon: false,\n    };\n    this.flipCellsAround = this.flipCellsAround.bind(this);\n    this.resetGame = this.resetGame.bind(this);\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    for (let i = 0; i < this.props.nrows; i++) {\n      board.push([]);\n      for (let j = 0; j < this.props.ncols; j++) {\n        board[i].push(Math.random() < this.props.chanceListStartsOn);\n      }\n    }\n\n    // TODO: create array-of-arrays of true/false values\n\n    console.log(board);\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split('-').map(Number);\n    // console.log(board[y][x]);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n    flipCell(y, x);\n    flipCell(y, x - 1);\n    flipCell(y - 1, x);\n    flipCell(y, x + 1);\n    flipCell(y + 1, x);\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    let hasWon = board.flat().every((x) => x === false);\n\n    console.log(hasWon);\n    this.setState({ hasWon, board });\n  }\n\n  resetGame() {\n    this.setState((prev) => ({\n      hasWon: !prev.hasWon,\n    }));\n  }\n\n  /** Render game board or winning message. */\n\n  render() {\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n    let winner = (\n      <div>\n        <h1>You win!</h1>\n        <button onClick={this.resetGame}>Play again!</button>\n      </div>\n    );\n    // make table board\n\n    // TODO\n    let displayBoard = (\n      <>\n        <h1>\n          <span className='neon-orange'>Lights</span>\n          <span className='neon-blue'>Out</span>\n        </h1>\n\n        <table className='Board'>\n          <tbody>\n            {this.state.board.map((rows, rowIndex) => (\n              <tr key={rowIndex}>\n                {rows.map((cell, colIndex) => (\n                  <Cell\n                    flipCellsAroundMe={this.flipCellsAround}\n                    isLit={cell}\n                    coords={`${rowIndex}-${colIndex}`}\n                    key={`${rowIndex}-${colIndex}`}\n                  />\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </>\n    );\n    return this.state.hasWon ? winner : displayBoard;\n  }\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}